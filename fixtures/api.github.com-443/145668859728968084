GET /repos/golang/go/commits/adfa87c5d754252f2bf428b38560de3d630dbe9d?access_token=token
host: api.github.com
accept: application/vnd.github.v3+json

HTTP/1.1 200 OK
server: GitHub.com
date: Sun, 28 Feb 2016 20:36:06 GMT
content-type: application/json; charset=utf-8
content-length: 10147
connection: close
status: 200 OK
x-ratelimit-limit: 5000
x-ratelimit-remaining: 4860
x-ratelimit-reset: 1456694697
cache-control: private, max-age=60, s-maxage=60
vary: Accept, Authorization, Cookie, X-GitHub-OTP, Accept-Encoding
etag: "7b0ff966bff3f968b0d55b8f568faaba"
last-modified: Tue, 12 Jul 2011 14:19:11 GMT
x-oauth-scopes: public_repo
x-accepted-oauth-scopes: 
x-github-media-type: github.v3; format=json
access-control-allow-credentials: true
access-control-expose-headers: ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval
access-control-allow-origin: *
content-security-policy: default-src 'none'
strict-transport-security: max-age=31536000; includeSubdomains; preload
x-content-type-options: nosniff
x-frame-options: deny
x-xss-protection: 1; mode=block
x-served-by: 3e3b9690823fb031da84658eb58aa83b
x-github-request-id: 4E320659:6DB1:419084D:56D35A36

{"sha":"adfa87c5d754252f2bf428b38560de3d630dbe9d","commit":{"author":{"name":"Russ Cox","email":"rsc@golang.org","date":"2011-07-12T14:19:11Z"},"committer":{"name":"Russ Cox","email":"rsc@golang.org","date":"2011-07-12T14:19:11Z"},"message":"[release-branch.r58] cgo: handle new Apple LLVM-based gcc from Xcode 4.2\n\n««« CL 4607045 / 142f0bc0d6e7\ncgo: handle new Apple LLVM-based gcc from Xcode 4.2\n\nThat gcc does not include enumerator names and values\nin its DWARF debug output.  Create a data block from which\nwe can read the values instead.\n\nFixes #1881.\n\nR=iant\nCC=golang-dev\nhttps://golang.org/cl/4607045\n»»»\n\nR=adg\nCC=golang-dev\nhttps://golang.org/cl/4708042","tree":{"sha":"cb81d7f1dcdab05ba79e5e6e50a2364eee45fa4c","url":"https://api.github.com/repos/golang/go/git/trees/cb81d7f1dcdab05ba79e5e6e50a2364eee45fa4c"},"url":"https://api.github.com/repos/golang/go/git/commits/adfa87c5d754252f2bf428b38560de3d630dbe9d","comment_count":0},"url":"https://api.github.com/repos/golang/go/commits/adfa87c5d754252f2bf428b38560de3d630dbe9d","html_url":"https://github.com/golang/go/commit/adfa87c5d754252f2bf428b38560de3d630dbe9d","comments_url":"https://api.github.com/repos/golang/go/commits/adfa87c5d754252f2bf428b38560de3d630dbe9d/comments","author":{"login":"rsc","id":104030,"avatar_url":"https://avatars.githubusercontent.com/u/104030?v=3","gravatar_id":"","url":"https://api.github.com/users/rsc","html_url":"https://github.com/rsc","followers_url":"https://api.github.com/users/rsc/followers","following_url":"https://api.github.com/users/rsc/following{/other_user}","gists_url":"https://api.github.com/users/rsc/gists{/gist_id}","starred_url":"https://api.github.com/users/rsc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rsc/subscriptions","organizations_url":"https://api.github.com/users/rsc/orgs","repos_url":"https://api.github.com/users/rsc/repos","events_url":"https://api.github.com/users/rsc/events{/privacy}","received_events_url":"https://api.github.com/users/rsc/received_events","type":"User","site_admin":false},"committer":{"login":"rsc","id":104030,"avatar_url":"https://avatars.githubusercontent.com/u/104030?v=3","gravatar_id":"","url":"https://api.github.com/users/rsc","html_url":"https://github.com/rsc","followers_url":"https://api.github.com/users/rsc/followers","following_url":"https://api.github.com/users/rsc/following{/other_user}","gists_url":"https://api.github.com/users/rsc/gists{/gist_id}","starred_url":"https://api.github.com/users/rsc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rsc/subscriptions","organizations_url":"https://api.github.com/users/rsc/orgs","repos_url":"https://api.github.com/users/rsc/repos","events_url":"https://api.github.com/users/rsc/events{/privacy}","received_events_url":"https://api.github.com/users/rsc/received_events","type":"User","site_admin":false},"parents":[{"sha":"af97a0b94c5196b13eddfff6663c916af789a599","url":"https://api.github.com/repos/golang/go/commits/af97a0b94c5196b13eddfff6663c916af789a599","html_url":"https://github.com/golang/go/commit/af97a0b94c5196b13eddfff6663c916af789a599"}],"stats":{"total":99,"additions":80,"deletions":19},"files":[{"sha":"e4e56d8dd6614d06f91b010c64569510bd072a5d","filename":"src/cmd/cgo/gcc.go","status":"modified","additions":72,"deletions":17,"changes":89,"blob_url":"https://github.com/golang/go/blob/adfa87c5d754252f2bf428b38560de3d630dbe9d/src/cmd/cgo/gcc.go","raw_url":"https://github.com/golang/go/raw/adfa87c5d754252f2bf428b38560de3d630dbe9d/src/cmd/cgo/gcc.go","contents_url":"https://api.github.com/repos/golang/go/contents/src/cmd/cgo/gcc.go?ref=adfa87c5d754252f2bf428b38560de3d630dbe9d","patch":"@@ -13,6 +13,7 @@ import (\n \t\"debug/elf\"\n \t\"debug/macho\"\n \t\"debug/pe\"\n+\t\"encoding/binary\"\n \t\"flag\"\n \t\"fmt\"\n \t\"go/ast\"\n@@ -477,7 +478,27 @@ func (p *Package) loadDWARF(f *File, names []*Name) {\n \t\t\tfmt.Fprintf(&b, \"enum { __cgo_enum__%d = %s };\\n\", i, n.C)\n \t\t}\n \t}\n-\td := p.gccDebug(b.Bytes())\n+\n+\t// Apple's LLVM-based gcc does not include the enumeration\n+\t// names and values in its DWARF debug output.  In case we're\n+\t// using such a gcc, create a data block initialized with the values.\n+\t// We can read them out of the object file.\n+\tfmt.Fprintf(&b, \"long long __cgodebug_data[] = {\\n\")\n+\tfor _, n := range names {\n+\t\tif n.Kind == \"const\" {\n+\t\t\tfmt.Fprintf(&b, \"\\t%s,\\n\", n.C)\n+\t\t} else {\n+\t\t\tfmt.Fprintf(&b, \"\\t0,\\n\")\n+\t\t}\n+\t}\n+\tfmt.Fprintf(&b, \"\\t0\\n\")\n+\tfmt.Fprintf(&b, \"};\\n\")\n+\n+\td, bo, debugData := p.gccDebug(b.Bytes())\n+\tenumVal := make([]int64, len(debugData)/8)\n+\tfor i := range enumVal {\n+\t\tenumVal[i] = int64(bo.Uint64(debugData[i*8:]))\n+\t}\n \n \t// Scan DWARF info for top-level TagVariable entries with AttrName __cgo__i.\n \ttypes := make([]dwarf.Type, len(names))\n@@ -569,9 +590,12 @@ func (p *Package) loadDWARF(f *File, names []*Name) {\n \t\t\t\t// Remove injected enum to ensure the value will deep-compare\n \t\t\t\t// equally in future loads of the same constant.\n \t\t\t\tn.Type.EnumValues[k] = 0, false\n+\t\t\t} else if n.Kind == \"const\" && i < len(enumVal) {\n+\t\t\t\tn.Const = strconv.Itoa64(enumVal[i])\n \t\t\t}\n \t\t}\n \t}\n+\n }\n \n // rewriteRef rewrites all the C.xxx references in f.AST to refer to the\n@@ -593,6 +617,9 @@ func (p *Package) rewriteRef(f *File) {\n \t// are trying to do a ,err call.  Also check that\n \t// functions are only used in calls.\n \tfor _, r := range f.Ref {\n+\t\tif r.Name.Kind == \"const\" && r.Name.Const == \"\" {\n+\t\t\terror(r.Pos(), \"unable to find value of constant C.%s\", r.Name.Go)\n+\t\t}\n \t\tvar expr ast.Expr = ast.NewIdent(r.Name.Mangle) // default\n \t\tswitch r.Context {\n \t\tcase \"call\", \"call2\":\n@@ -692,29 +719,57 @@ func (p *Package) gccCmd() []string {\n }\n \n // gccDebug runs gcc -gdwarf-2 over the C program stdin and\n-// returns the corresponding DWARF data and any messages\n-// printed to standard error.\n-func (p *Package) gccDebug(stdin []byte) *dwarf.Data {\n+// returns the corresponding DWARF data and, if present, debug data block.\n+func (p *Package) gccDebug(stdin []byte) (*dwarf.Data, binary.ByteOrder, []byte) {\n \trunGcc(stdin, p.gccCmd())\n \n-\t// Try to parse f as ELF and Mach-O and hope one works.\n-\tvar f interface {\n-\t\tDWARF() (*dwarf.Data, os.Error)\n-\t}\n-\tvar err os.Error\n-\tif f, err = elf.Open(gccTmp); err != nil {\n-\t\tif f, err = macho.Open(gccTmp); err != nil {\n-\t\t\tif f, err = pe.Open(gccTmp); err != nil {\n-\t\t\t\tfatalf(\"cannot parse gcc output %s as ELF or Mach-O or PE object\", gccTmp)\n+\tif f, err := macho.Open(gccTmp); err == nil {\n+\t\td, err := f.DWARF()\n+\t\tif err != nil {\n+\t\t\tfatalf(\"cannot load DWARF output from %s: %v\", gccTmp, err)\n+\t\t}\n+\t\tvar data []byte\n+\t\tif f.Symtab != nil {\n+\t\t\tfor i := range f.Symtab.Syms {\n+\t\t\t\ts := &f.Symtab.Syms[i]\n+\t\t\t\t// Mach-O still uses a leading _ to denote non-assembly symbols.\n+\t\t\t\tif s.Name == \"_\"+\"__cgodebug_data\" {\n+\t\t\t\t\t// Found it.  Now find data section.\n+\t\t\t\t\tif i := int(s.Sect) - 1; 0 <= i && i < len(f.Sections) {\n+\t\t\t\t\t\tsect := f.Sections[i]\n+\t\t\t\t\t\tif sect.Addr <= s.Value && s.Value < sect.Addr+sect.Size {\n+\t\t\t\t\t\t\tif sdat, err := sect.Data(); err == nil {\n+\t\t\t\t\t\t\t\tdata = sdat[s.Value-sect.Addr:]\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n+\t\treturn d, f.ByteOrder, data\n \t}\n \n-\td, err := f.DWARF()\n-\tif err != nil {\n-\t\tfatalf(\"cannot load DWARF debug information from %s: %s\", gccTmp, err)\n+\t// Can skip debug data block in ELF and PE for now.\n+\t// The DWARF information is complete.\n+\n+\tif f, err := elf.Open(gccTmp); err == nil {\n+\t\td, err := f.DWARF()\n+\t\tif err != nil {\n+\t\t\tfatalf(\"cannot load DWARF output from %s: %v\", gccTmp, err)\n+\t\t}\n+\t\treturn d, f.ByteOrder, nil\n \t}\n-\treturn d\n+\n+\tif f, err := pe.Open(gccTmp); err == nil {\n+\t\td, err := f.DWARF()\n+\t\tif err != nil {\n+\t\t\tfatalf(\"cannot load DWARF output from %s: %v\", gccTmp, err)\n+\t\t}\n+\t\treturn d, binary.LittleEndian, nil\n+\t}\n+\n+\tfatalf(\"cannot parse gcc output %s as ELF, Mach-O, PE object\", gccTmp)\n+\tpanic(\"not reached\")\n }\n \n // gccDefines runs gcc -E -dM -xc - over the C program stdin"},{"sha":"a33785b049e5743a1540ecfc5643abd098dc3b35","filename":"src/pkg/debug/dwarf/type.go","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/golang/go/blob/adfa87c5d754252f2bf428b38560de3d630dbe9d/src/pkg/debug/dwarf/type.go","raw_url":"https://github.com/golang/go/raw/adfa87c5d754252f2bf428b38560de3d630dbe9d/src/pkg/debug/dwarf/type.go","contents_url":"https://api.github.com/repos/golang/go/contents/src/pkg/debug/dwarf/type.go?ref=adfa87c5d754252f2bf428b38560de3d630dbe9d","patch":"@@ -352,8 +352,8 @@ func (d *Data) Type(off Offset) (Type, os.Error) {\n \t\t\t}\n \t\t}\n \t\tif ndim == 0 {\n-\t\t\terr = DecodeError{\"info\", e.Offset, \"missing dimension for array\"}\n-\t\t\tgoto Error\n+\t\t\t// LLVM generates this for x[].\n+\t\t\tt.Count = -1\n \t\t}\n \n \tcase TagBaseType:"},{"sha":"220ab940834e6387a106e43ce6f5371909f6e8fd","filename":"src/pkg/debug/elf/file.go","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/golang/go/blob/adfa87c5d754252f2bf428b38560de3d630dbe9d/src/pkg/debug/elf/file.go","raw_url":"https://github.com/golang/go/raw/adfa87c5d754252f2bf428b38560de3d630dbe9d/src/pkg/debug/elf/file.go","contents_url":"https://api.github.com/repos/golang/go/contents/src/pkg/debug/elf/file.go?ref=adfa87c5d754252f2bf428b38560de3d630dbe9d","patch":"@@ -546,6 +546,12 @@ func (f *File) DWARF() (*dwarf.Data, os.Error) {\n \treturn dwarf.New(abbrev, nil, nil, info, nil, nil, nil, str)\n }\n \n+// Symbols returns the symbol table for f.\n+func (f *File) Symbols() ([]Symbol, os.Error) {\n+\tsym, _, err := f.getSymbols(SHT_SYMTAB)\n+\treturn sym, err\n+}\n+\n type ImportedSymbol struct {\n \tName    string\n \tVersion string"}]}