GET /repos/golang/go/commits/50ddb98b243e35de1dbe572bc5240129054af9f6?access_token=token
host: api.github.com
accept: application/vnd.github.v3+json

HTTP/1.1 200 OK
server: GitHub.com
date: Sun, 28 Feb 2016 20:38:46 GMT
content-type: application/json; charset=utf-8
content-length: 10334
connection: close
status: 200 OK
x-ratelimit-limit: 5000
x-ratelimit-remaining: 4813
x-ratelimit-reset: 1456694697
cache-control: private, max-age=60, s-maxage=60
vary: Accept, Authorization, Cookie, X-GitHub-OTP, Accept-Encoding
etag: "819e4c0eff9bafdacf0ea8da9e20d69d"
last-modified: Wed, 20 Jul 2011 05:45:55 GMT
x-oauth-scopes: public_repo
x-accepted-oauth-scopes: 
x-github-media-type: github.v3; format=json
access-control-allow-credentials: true
access-control-expose-headers: ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval
access-control-allow-origin: *
content-security-policy: default-src 'none'
strict-transport-security: max-age=31536000; includeSubdomains; preload
x-content-type-options: nosniff
x-frame-options: deny
x-xss-protection: 1; mode=block
x-served-by: 474556b853193c38f1b14328ce2d1b7d
x-github-request-id: 4E320659:99AD:421B2DF:56D35AD6

{"sha":"50ddb98b243e35de1dbe572bc5240129054af9f6","commit":{"author":{"name":"Andrew Gerrand","email":"adg@golang.org","date":"2011-07-20T05:45:55Z"},"committer":{"name":"Andrew Gerrand","email":"adg@golang.org","date":"2011-07-20T05:45:55Z"},"message":"weekly.2011-07-19\n\nR=golang-dev, nigeltao, dsymonds, r\nCC=golang-dev\nhttps://golang.org/cl/4801042","tree":{"sha":"22efa836728c11f8f8bb2d4e3a52108d5217ce04","url":"https://api.github.com/repos/golang/go/git/trees/22efa836728c11f8f8bb2d4e3a52108d5217ce04"},"url":"https://api.github.com/repos/golang/go/git/commits/50ddb98b243e35de1dbe572bc5240129054af9f6","comment_count":0},"url":"https://api.github.com/repos/golang/go/commits/50ddb98b243e35de1dbe572bc5240129054af9f6","html_url":"https://github.com/golang/go/commit/50ddb98b243e35de1dbe572bc5240129054af9f6","comments_url":"https://api.github.com/repos/golang/go/commits/50ddb98b243e35de1dbe572bc5240129054af9f6/comments","author":{"login":"adg","id":8446613,"avatar_url":"https://avatars.githubusercontent.com/u/8446613?v=3","gravatar_id":"","url":"https://api.github.com/users/adg","html_url":"https://github.com/adg","followers_url":"https://api.github.com/users/adg/followers","following_url":"https://api.github.com/users/adg/following{/other_user}","gists_url":"https://api.github.com/users/adg/gists{/gist_id}","starred_url":"https://api.github.com/users/adg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/adg/subscriptions","organizations_url":"https://api.github.com/users/adg/orgs","repos_url":"https://api.github.com/users/adg/repos","events_url":"https://api.github.com/users/adg/events{/privacy}","received_events_url":"https://api.github.com/users/adg/received_events","type":"User","site_admin":false},"committer":{"login":"adg","id":8446613,"avatar_url":"https://avatars.githubusercontent.com/u/8446613?v=3","gravatar_id":"","url":"https://api.github.com/users/adg","html_url":"https://github.com/adg","followers_url":"https://api.github.com/users/adg/followers","following_url":"https://api.github.com/users/adg/following{/other_user}","gists_url":"https://api.github.com/users/adg/gists{/gist_id}","starred_url":"https://api.github.com/users/adg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/adg/subscriptions","organizations_url":"https://api.github.com/users/adg/orgs","repos_url":"https://api.github.com/users/adg/repos","events_url":"https://api.github.com/users/adg/events{/privacy}","received_events_url":"https://api.github.com/users/adg/received_events","type":"User","site_admin":false},"parents":[{"sha":"48d1240e51bcbbbfe10cbb6a70332039acbf0fe9","url":"https://api.github.com/repos/golang/go/commits/48d1240e51bcbbbfe10cbb6a70332039acbf0fe9","html_url":"https://github.com/golang/go/commit/48d1240e51bcbbbfe10cbb6a70332039acbf0fe9"}],"stats":{"total":118,"additions":117,"deletions":1},"files":[{"sha":"db22155743422fdd70d8f3f1573517f40afc9527","filename":".hgtags","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/golang/go/blob/50ddb98b243e35de1dbe572bc5240129054af9f6/.hgtags","raw_url":"https://github.com/golang/go/raw/50ddb98b243e35de1dbe572bc5240129054af9f6/.hgtags","contents_url":"https://api.github.com/repos/golang/go/contents/.hgtags?ref=50ddb98b243e35de1dbe572bc5240129054af9f6","patch":"@@ -70,6 +70,5 @@ dac76f0b1a18a5de5b54a1dc0b231aceaf1c8583 weekly.2011-06-16\n 541c445d6c1353fbfa39df7dc4b0eb27558d1fc1 weekly.2011-06-23\n 1b38d90eebcddefabb3901c5bb63c7e2b04a6ec5 release.r58\n 16bfa562ba767aefd82e598da8b15ee4729e23b0 weekly.2011-07-07\n-16bfa562ba767aefd82e598da8b15ee4729e23b0 weekly\n d292bc7886682d35bb391bf572be28656baee12d release.r58.1\n d292bc7886682d35bb391bf572be28656baee12d release"},{"sha":"8e79ad5e5c4b1e6e1bfb31efc1c207be2a7a6b48","filename":"doc/devel/weekly.html","status":"modified","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/golang/go/blob/50ddb98b243e35de1dbe572bc5240129054af9f6/doc/devel/weekly.html","raw_url":"https://github.com/golang/go/raw/50ddb98b243e35de1dbe572bc5240129054af9f6/doc/devel/weekly.html","contents_url":"https://api.github.com/repos/golang/go/contents/doc/devel/weekly.html?ref=50ddb98b243e35de1dbe572bc5240129054af9f6","patch":"@@ -14,6 +14,123 @@\n hg update weekly.<i>YYYY-MM-DD</i>\n </pre>\n \n+<h2 id=\"2011-07-19\">2011-07-19</h2>\n+\n+<pre>\n+This weekly snapshot includes a language change and a change to the image\n+package that may require changes to client code.\n+\n+The language change is that an \"else\" block is now required to have braces\n+except if the body of the \"else\" is another \"if\". Since gofmt always puts those\n+braces in anyway, programs will not be affected unless they contain \"else for\",\n+\"else switch\", or \"else select\". Run gofmt to fix any such programs.\n+\n+The image package has had significant changes made to the Pix field of struct\n+types such as image.RGBA and image.NRGBA. The image.Image interface type has\n+not changed, though, and you should not need to change your code if you don't\n+explicitly refer to Pix fields. For example, if you decode a number of images\n+using the image/jpeg package, compose them using image/draw, and then encode\n+the result using image/png, then your code should still work as before.\n+\n+If you do explicitly refer to Pix fields, there are two changes.  First, Pix[0]\n+now refers to the pixel at Bounds().Min instead of the pixel at (0, 0). Second,\n+the element type of the Pix slice is now uint8 instead of image.FooColor. For\n+example, for an image.RGBA, the channel values will be packed R, G, B, A, R, G,\n+B, A, etc. For 16-bits-per-channel color types, the pixel data will be stored\n+as big-endian uint8s.\n+\n+Most Pix field types have changed, and so if your code still compiles after\n+this change, then you probably don't need to make any further changes (unless\n+you use an image.Paletted's Pix field). If you do get compiler errors, code\n+that used to look like this:\n+\n+\t// Get the R, G, B, A values for the pixel at (x, y).\n+\tvar m *image.RGBA = loadAnImage()\n+\tc := m.Pix[y*m.Stride + x]\n+\tr, g, b, a := c.R, c.G, c.B, c.A\n+\n+should now look like this:\n+\n+\t// Get the R, G, B, A values for the pixel at (x, y).\n+\tvar m *image.RGBA = loadAnImage()\n+\ti := (y-m.Rect.Min.Y)*m.Stride + (x-m.Rect.Min.X)*4\n+\tr := m.Pix[i+0]\n+\tg := m.Pix[i+1]\n+\tb := m.Pix[i+2]\n+\ta := m.Pix[i+3]\n+\n+This image package change will not be fixed by gofix: how best to translate\n+code into something efficient and idiomatic depends on the surrounding context,\n+and is not easily automatable. Examples of what to do can be found in the\n+changes to image/draw/draw.go in http://codereview.appspot.com/4675076/\n+\n+Other changes:\n+* 6l: change default output name to 6.out.exe on windows (thanks Alex Brainman).\n+* archive/zip: add Writer,\n+\tadd Mtime_ns function to get modified time in sensible format.\n+* cc, ld, gc: fixes for Plan 9 build (thanks Lucio De Re).\n+* cgi: close stdout reader pipe when finished.\n+* cgo: add missing semicolon in generated struct,\n+\twindows amd64 port (thanks Wei Guangjing).\n+* codereview: fix for Mercurial 1.9.\n+* dashboard: list \"most installed this week\" with rolling count.\n+* debug/elf: read ELF Program headers (thanks Matthew Horsnell).\n+* debug/pe: fixes ImportedSymbols for Win64 (thanks Wei Guangjing).\n+* debug/proc: remove unused package.\n+* doc/talks/io2010: update with gofix and handle the errors.\n+* exp/eval, exp/ogle: remove packages eval and ogle.\n+* exp/regexp/syntax: add Prog.NumCap.\n+* exp/template: API changes, bug fixes, and tweaks.\n+* flag: make -help nicer.\n+* fmt: Scan(&int) was mishandling a lone digit.\n+* gc: fix closure bug,\n+\tfix to build with clang (thanks Dave Cheney),\n+\tmake size of struct{} and [0]byte 0 bytes (thanks Robert Hencke),\n+\tsome enhancements to printing debug info.\n+* gif: fix local color map and coordinates.\n+* go/build: fixes for windows (thanks Alex Brainman),\n+\tinclude processing of .c files for cgo packages (thanks Alex Brainman),\n+\tless aggressive failure when GOROOT not found.\n+* go/printer: changed max. number of newlines from 3 to 2.\n+* gob: register more slice types (thanks Bobby Powers).\n+* godoc: support for file systems stored in .zip files.\n+* goinstall, dashboard: Google Code now supports git (thanks Tarmigan Casebolt).\n+* hash/crc32: add SSE4.2 support.\n+* html: update section references in comments to the latest HTML5 spec.\n+* http: drain the pipe output in TestHandlerPanic to avoid logging deadlock,\n+\tfix Content-Type of file extension (thanks Yasuhiro Matsumoto),\n+\timplement http.FileSystem for zip files,\n+\tlet FileServer work when path doesn't begin with a slash,\n+\tsupport for periodic flushing in ReverseProxy.\n+* image/draw: add benchmarks.\n+* json: add omitempty struct tag option,\n+\tallow using '$' and '-' as the struct field's tag (thanks Mikio Hara),\n+\tencode \\r and \\n in strings as e.g. \"\\n\", not \"\\u000A\" (thanks Evan Martin),\n+\tescape < and > in any JSON string for XSS prevention.\n+* ld: allow seek within write buffer<\n+\tadd a PT_LOAD PHDR entry for the PHDR (thanks David Anderson).\n+* net: windows/amd64 port (thanks Wei Guangjing).\n+* os: plan9: add Process.Signal as a way to send notes (thanks Yuval Pavel Zholkover).\n+* os: don't permit Process.Signal after a successful Wait.\n+* path/filepath: fixes for windows paths (thanks Alex Brainman).\n+* reflect: add Value.NumMethod,\n+\tpanic if Method index is out of range for a type.\n+* runtime: faster entersyscall, exitsyscall,\n+\tfix panic for make(chan [0]byte),\n+\tfix subtle select bug (thanks Hector Chu),\n+\tmake goc2c build on Plan 9 (thanks Lucio De Re),\n+\tmake TestSideEffectOrder work twice,\n+\tseveral parallelism-related optimizations and fixes,\n+\tstdcall_raw stack 16byte align for Win64 (thanks Wei Guangjing),\n+\tstring-related optimizations (thanks Quan Yong Zhai),\n+\ttrack running goroutine count.\n+* strconv: handle [-+]Infinity in atof.\n+* sync: add fast paths to WaitGroup,\n+\timprove RWMutex performance.\n+* syscall: add Flock on Linux,\n+\tparse and encode SCM_RIGHTS and SCM_CREDENTIALS (thanks Albert Strasheim).\n+</pre>\n+\n <h2 id=\"2011-07-07\">2011-07-07</h2>\n \n <pre>"}]}