GET /repos/golang/go/commits/1657de2d6dbb020e15908668f209f3be7dcef151?access_token=token
host: api.github.com
accept: application/vnd.github.v3+json

HTTP/1.1 200 OK
server: GitHub.com
date: Sun, 28 Feb 2016 20:38:58 GMT
content-type: application/json; charset=utf-8
content-length: 7903
connection: close
status: 200 OK
x-ratelimit-limit: 5000
x-ratelimit-remaining: 4804
x-ratelimit-reset: 1456694697
cache-control: private, max-age=60, s-maxage=60
vary: Accept, Authorization, Cookie, X-GitHub-OTP, Accept-Encoding
etag: "5422bd70ebfe360b484a8f51ddfa1e99"
last-modified: Wed, 13 Aug 2014 03:18:02 GMT
x-oauth-scopes: public_repo
x-accepted-oauth-scopes: 
x-github-media-type: github.v3; format=json
access-control-allow-credentials: true
access-control-expose-headers: ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval
access-control-allow-origin: *
content-security-policy: default-src 'none'
strict-transport-security: max-age=31536000; includeSubdomains; preload
x-content-type-options: nosniff
x-frame-options: deny
x-xss-protection: 1; mode=block
x-served-by: cee4c0729c8e9147e7abcb45b9d69689
x-github-request-id: 4E320659:3F87:1542F18:56D35AE1

{"sha":"1657de2d6dbb020e15908668f209f3be7dcef151","commit":{"author":{"name":"Andrew Gerrand","email":"adg@golang.org","date":"2014-08-13T03:18:02Z"},"committer":{"name":"Andrew Gerrand","email":"adg@golang.org","date":"2014-08-13T03:18:02Z"},"message":"[release-branch.go1.3] net: prevent spurious on-connect events via epoll on linux\n\n««« CL 120820043 / 06a4b59c1393\nnet: prevent spurious on-connect events via epoll on linux\n\nOn Linux, adding a socket descriptor to epoll instance before getting\nthe EINPROGRESS return value from connect system call could be a root\ncause of spurious on-connect events.\n\nSee golang.org/issue/8276, golang.org/issue/8426 for further information.\n\nAll credit to Jason Eggleston <jason@eggnet.com>\n\nFixes #8276.\nFixes #8426.\n\nLGTM=dvyukov\nR=dvyukov, golang-codereviews, adg, dave, iant, alex.brainman\nCC=golang-codereviews\nhttps://golang.org/cl/120820043\n»»»\n\nTBR=r, rsc\nCC=golang-codereviews\nhttps://golang.org/cl/128110045","tree":{"sha":"62367a9618b6054f567e629f2a09492f0576e7d1","url":"https://api.github.com/repos/golang/go/git/trees/62367a9618b6054f567e629f2a09492f0576e7d1"},"url":"https://api.github.com/repos/golang/go/git/commits/1657de2d6dbb020e15908668f209f3be7dcef151","comment_count":0},"url":"https://api.github.com/repos/golang/go/commits/1657de2d6dbb020e15908668f209f3be7dcef151","html_url":"https://github.com/golang/go/commit/1657de2d6dbb020e15908668f209f3be7dcef151","comments_url":"https://api.github.com/repos/golang/go/commits/1657de2d6dbb020e15908668f209f3be7dcef151/comments","author":{"login":"adg","id":8446613,"avatar_url":"https://avatars.githubusercontent.com/u/8446613?v=3","gravatar_id":"","url":"https://api.github.com/users/adg","html_url":"https://github.com/adg","followers_url":"https://api.github.com/users/adg/followers","following_url":"https://api.github.com/users/adg/following{/other_user}","gists_url":"https://api.github.com/users/adg/gists{/gist_id}","starred_url":"https://api.github.com/users/adg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/adg/subscriptions","organizations_url":"https://api.github.com/users/adg/orgs","repos_url":"https://api.github.com/users/adg/repos","events_url":"https://api.github.com/users/adg/events{/privacy}","received_events_url":"https://api.github.com/users/adg/received_events","type":"User","site_admin":false},"committer":{"login":"adg","id":8446613,"avatar_url":"https://avatars.githubusercontent.com/u/8446613?v=3","gravatar_id":"","url":"https://api.github.com/users/adg","html_url":"https://github.com/adg","followers_url":"https://api.github.com/users/adg/followers","following_url":"https://api.github.com/users/adg/following{/other_user}","gists_url":"https://api.github.com/users/adg/gists{/gist_id}","starred_url":"https://api.github.com/users/adg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/adg/subscriptions","organizations_url":"https://api.github.com/users/adg/orgs","repos_url":"https://api.github.com/users/adg/repos","events_url":"https://api.github.com/users/adg/events{/privacy}","received_events_url":"https://api.github.com/users/adg/received_events","type":"User","site_admin":false},"parents":[{"sha":"f36546bc1078796716dcd8028f0d8210e366d80e","url":"https://api.github.com/repos/golang/go/commits/f36546bc1078796716dcd8028f0d8210e366d80e","html_url":"https://github.com/golang/go/commit/f36546bc1078796716dcd8028f0d8210e366d80e"}],"stats":{"total":49,"additions":30,"deletions":19},"files":[{"sha":"e22861abbda9912b6e3ca7910c1cc90d6782cff3","filename":"src/pkg/net/fd_unix.go","status":"modified","additions":14,"deletions":4,"changes":18,"blob_url":"https://github.com/golang/go/blob/1657de2d6dbb020e15908668f209f3be7dcef151/src/pkg/net/fd_unix.go","raw_url":"https://github.com/golang/go/raw/1657de2d6dbb020e15908668f209f3be7dcef151/src/pkg/net/fd_unix.go","contents_url":"https://api.github.com/repos/golang/go/contents/src/pkg/net/fd_unix.go?ref=1657de2d6dbb020e15908668f209f3be7dcef151","patch":"@@ -68,16 +68,19 @@ func (fd *netFD) name() string {\n \treturn fd.net + \":\" + ls + \"->\" + rs\n }\n \n-func (fd *netFD) connect(la, ra syscall.Sockaddr) error {\n+func (fd *netFD) connect(la, ra syscall.Sockaddr, deadline time.Time) error {\n \t// Do not need to call fd.writeLock here,\n \t// because fd is not yet accessible to user,\n \t// so no concurrent operations are possible.\n-\tif err := fd.pd.PrepareWrite(); err != nil {\n-\t\treturn err\n-\t}\n \tswitch err := syscall.Connect(fd.sysfd, ra); err {\n \tcase syscall.EINPROGRESS, syscall.EALREADY, syscall.EINTR:\n \tcase nil, syscall.EISCONN:\n+\t\tif !deadline.IsZero() && deadline.Before(time.Now()) {\n+\t\t\treturn errTimeout\n+\t\t}\n+\t\tif err := fd.init(); err != nil {\n+\t\t\treturn err\n+\t\t}\n \t\treturn nil\n \tcase syscall.EINVAL:\n \t\t// On Solaris we can see EINVAL if the socket has\n@@ -92,6 +95,13 @@ func (fd *netFD) connect(la, ra syscall.Sockaddr) error {\n \tdefault:\n \t\treturn err\n \t}\n+\tif err := fd.init(); err != nil {\n+\t\treturn err\n+\t}\n+\tif !deadline.IsZero() {\n+\t\tfd.setWriteDeadline(deadline)\n+\t\tdefer fd.setWriteDeadline(noDeadline)\n+\t}\n \tfor {\n \t\t// Performing multiple connect system calls on a\n \t\t// non-blocking socket under Unix variants does not"},{"sha":"d1129dccc47d8a857d038cf5758b794f5dacd80b","filename":"src/pkg/net/fd_windows.go","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/golang/go/blob/1657de2d6dbb020e15908668f209f3be7dcef151/src/pkg/net/fd_windows.go","raw_url":"https://github.com/golang/go/raw/1657de2d6dbb020e15908668f209f3be7dcef151/src/pkg/net/fd_windows.go","contents_url":"https://api.github.com/repos/golang/go/contents/src/pkg/net/fd_windows.go?ref=1657de2d6dbb020e15908668f209f3be7dcef151","patch":"@@ -313,10 +313,17 @@ func (fd *netFD) setAddr(laddr, raddr Addr) {\n \truntime.SetFinalizer(fd, (*netFD).Close)\n }\n \n-func (fd *netFD) connect(la, ra syscall.Sockaddr) error {\n+func (fd *netFD) connect(la, ra syscall.Sockaddr, deadline time.Time) error {\n \t// Do not need to call fd.writeLock here,\n \t// because fd is not yet accessible to user,\n \t// so no concurrent operations are possible.\n+\tif err := fd.init(); err != nil {\n+\t\treturn err\n+\t}\n+\tif !deadline.IsZero() {\n+\t\tfd.setWriteDeadline(deadline)\n+\t\tdefer fd.setWriteDeadline(noDeadline)\n+\t}\n \tif !canUseConnectEx(fd.net) {\n \t\treturn syscall.Connect(fd.sysfd, ra)\n \t}"},{"sha":"c80c7d6a2f1242f9a105d63b2cae59cad68adeec","filename":"src/pkg/net/sock_posix.go","status":"modified","additions":8,"deletions":14,"changes":22,"blob_url":"https://github.com/golang/go/blob/1657de2d6dbb020e15908668f209f3be7dcef151/src/pkg/net/sock_posix.go","raw_url":"https://github.com/golang/go/raw/1657de2d6dbb020e15908668f209f3be7dcef151/src/pkg/net/sock_posix.go","contents_url":"https://api.github.com/repos/golang/go/contents/src/pkg/net/sock_posix.go?ref=1657de2d6dbb020e15908668f209f3be7dcef151","patch":"@@ -107,24 +107,18 @@ func (fd *netFD) dial(laddr, raddr sockaddr, deadline time.Time, toAddr func(sys\n \t\t\t}\n \t\t}\n \t}\n-\tif err := fd.init(); err != nil {\n-\t\treturn err\n-\t}\n \tvar rsa syscall.Sockaddr\n \tif raddr != nil {\n \t\tif rsa, err = raddr.sockaddr(fd.family); err != nil {\n \t\t\treturn err\n-\t\t} else if rsa != nil {\n-\t\t\tif !deadline.IsZero() {\n-\t\t\t\tfd.setWriteDeadline(deadline)\n-\t\t\t}\n-\t\t\tif err := fd.connect(lsa, rsa); err != nil {\n-\t\t\t\treturn err\n-\t\t\t}\n-\t\t\tfd.isConnected = true\n-\t\t\tif !deadline.IsZero() {\n-\t\t\t\tfd.setWriteDeadline(noDeadline)\n-\t\t\t}\n+\t\t}\n+\t\tif err := fd.connect(lsa, rsa, deadline); err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tfd.isConnected = true\n+\t} else {\n+\t\tif err := fd.init(); err != nil {\n+\t\t\treturn err\n \t\t}\n \t}\n \tlsa, _ = syscall.Getsockname(fd.sysfd)"}]}