GET /repos/golang/go/commits/66330d8c6c0a23b7eb48688f9954264e48b039da?access_token=token
host: api.github.com
accept: application/vnd.github.v3+json

HTTP/1.1 200 OK
server: GitHub.com
date: Sun, 28 Feb 2016 20:36:52 GMT
content-type: application/json; charset=utf-8
content-length: 12599
connection: close
status: 200 OK
x-ratelimit-limit: 5000
x-ratelimit-remaining: 4843
x-ratelimit-reset: 1456694697
cache-control: private, max-age=60, s-maxage=60
vary: Accept, Authorization, Cookie, X-GitHub-OTP, Accept-Encoding
etag: "ebca8634bd3eabc6be079e7389d5b75b"
last-modified: Wed, 13 Jan 2016 23:40:13 GMT
x-oauth-scopes: public_repo
x-accepted-oauth-scopes: 
x-github-media-type: github.v3; format=json
access-control-allow-credentials: true
access-control-expose-headers: ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval
access-control-allow-origin: *
content-security-policy: default-src 'none'
strict-transport-security: max-age=31536000; includeSubdomains; preload
x-content-type-options: nosniff
x-frame-options: deny
x-xss-protection: 1; mode=block
x-served-by: 7f48e2f7761567e923121f17538d7a6d
x-github-request-id: 4E320659:3F87:153A9F5:56D35A63

{"sha":"66330d8c6c0a23b7eb48688f9954264e48b039da","commit":{"author":{"name":"Brad Fitzpatrick","email":"bradfitz@golang.org","date":"2016-01-13T23:20:20Z"},"committer":{"name":"Chris Broadfoot","email":"cbro@golang.org","date":"2016-01-13T23:40:13Z"},"message":"go/types: rename Importer2 to ImporterFrom\n\nPer https://groups.google.com/forum/#!topic/golang-dev/javNmryAh0I\n\nChange-Id: I08d7cbc94da4fc61c848f3dbee4637bf8fcfeb01\nReviewed-on: https://go-review.googlesource.com/18630\nReviewed-by: Alan Donovan <adonovan@google.com>\nRun-TryBot: Brad Fitzpatrick <bradfitz@golang.org>\nReviewed-by: Chris Broadfoot <cbro@golang.org>\nReviewed-by: Robert Griesemer <gri@golang.org>","tree":{"sha":"84c58833a98e963c935f2f1c89d4e7a5a8d590e5","url":"https://api.github.com/repos/golang/go/git/trees/84c58833a98e963c935f2f1c89d4e7a5a8d590e5"},"url":"https://api.github.com/repos/golang/go/git/commits/66330d8c6c0a23b7eb48688f9954264e48b039da","comment_count":0},"url":"https://api.github.com/repos/golang/go/commits/66330d8c6c0a23b7eb48688f9954264e48b039da","html_url":"https://github.com/golang/go/commit/66330d8c6c0a23b7eb48688f9954264e48b039da","comments_url":"https://api.github.com/repos/golang/go/commits/66330d8c6c0a23b7eb48688f9954264e48b039da/comments","author":{"login":"bradfitz","id":2621,"avatar_url":"https://avatars.githubusercontent.com/u/2621?v=3","gravatar_id":"","url":"https://api.github.com/users/bradfitz","html_url":"https://github.com/bradfitz","followers_url":"https://api.github.com/users/bradfitz/followers","following_url":"https://api.github.com/users/bradfitz/following{/other_user}","gists_url":"https://api.github.com/users/bradfitz/gists{/gist_id}","starred_url":"https://api.github.com/users/bradfitz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bradfitz/subscriptions","organizations_url":"https://api.github.com/users/bradfitz/orgs","repos_url":"https://api.github.com/users/bradfitz/repos","events_url":"https://api.github.com/users/bradfitz/events{/privacy}","received_events_url":"https://api.github.com/users/bradfitz/received_events","type":"User","site_admin":false},"committer":{"login":"broady","id":24982,"avatar_url":"https://avatars.githubusercontent.com/u/24982?v=3","gravatar_id":"","url":"https://api.github.com/users/broady","html_url":"https://github.com/broady","followers_url":"https://api.github.com/users/broady/followers","following_url":"https://api.github.com/users/broady/following{/other_user}","gists_url":"https://api.github.com/users/broady/gists{/gist_id}","starred_url":"https://api.github.com/users/broady/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/broady/subscriptions","organizations_url":"https://api.github.com/users/broady/orgs","repos_url":"https://api.github.com/users/broady/repos","events_url":"https://api.github.com/users/broady/events{/privacy}","received_events_url":"https://api.github.com/users/broady/received_events","type":"User","site_admin":false},"parents":[{"sha":"8c9ef9dd0a4667611a3afb710a319ba088a754ec","url":"https://api.github.com/repos/golang/go/commits/8c9ef9dd0a4667611a3afb710a319ba088a754ec","html_url":"https://github.com/golang/go/commit/8c9ef9dd0a4667611a3afb710a319ba088a754ec"}],"stats":{"total":56,"additions":30,"deletions":26},"files":[{"sha":"d63efd07059ded3698c2519908541f4f1de5ba73","filename":"api/go1.6.txt","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/golang/go/blob/66330d8c6c0a23b7eb48688f9954264e48b039da/api/go1.6.txt","raw_url":"https://github.com/golang/go/raw/66330d8c6c0a23b7eb48688f9954264e48b039da/api/go1.6.txt","contents_url":"https://api.github.com/repos/golang/go/contents/api/go1.6.txt?ref=66330d8c6c0a23b7eb48688f9954264e48b039da","patch":"@@ -186,6 +186,10 @@ pkg go/constant, func ToFloat(Value) Value\n pkg go/constant, func ToInt(Value) Value\n pkg go/constant, type Value interface, ExactString() string\n pkg go/types, method (*Package) SetName(string)\n+pkg go/types, type ImportMode int\n+pkg go/types, type ImporterFrom interface { Import, ImportFrom }\n+pkg go/types, type ImporterFrom interface, Import(string) (*Package, error)\n+pkg go/types, type ImporterFrom interface, ImportFrom(string, string, ImportMode) (*Package, error)\n pkg html/template, func IsTrue(interface{}) (bool, bool)\n pkg html/template, method (*Template) DefinedTemplates() string\n pkg image, func NewNYCbCrA(Rectangle, YCbCrSubsampleRatio) *NYCbCrA"},{"sha":"560b853c3915eda87e5be1c1d891b260982cf09c","filename":"src/go/importer/importer.go","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/golang/go/blob/66330d8c6c0a23b7eb48688f9954264e48b039da/src/go/importer/importer.go","raw_url":"https://github.com/golang/go/raw/66330d8c6c0a23b7eb48688f9954264e48b039da/src/go/importer/importer.go","contents_url":"https://api.github.com/repos/golang/go/contents/src/go/importer/importer.go?ref=66330d8c6c0a23b7eb48688f9954264e48b039da","patch":"@@ -50,7 +50,7 @@ func For(compiler string, lookup Lookup) types.Importer {\n }\n \n // Default returns an Importer for the compiler that built the running binary.\n-// If available, the result implements types.Importer2.\n+// If available, the result implements types.ImporterFrom.\n func Default() types.Importer {\n \treturn For(runtime.Compiler, nil)\n }\n@@ -60,10 +60,10 @@ func Default() types.Importer {\n type gcimports map[string]*types.Package\n \n func (m gcimports) Import(path string) (*types.Package, error) {\n-\treturn m.Import2(path, \"\" /* no vendoring */, 0)\n+\treturn m.ImportFrom(path, \"\" /* no vendoring */, 0)\n }\n \n-func (m gcimports) Import2(path, srcDir string, mode types.ImportMode) (*types.Package, error) {\n+func (m gcimports) ImportFrom(path, srcDir string, mode types.ImportMode) (*types.Package, error) {\n \tif mode != 0 {\n \t\tpanic(\"mode must be 0\")\n \t}\n@@ -78,10 +78,10 @@ type gccgoimports struct {\n }\n \n func (m *gccgoimports) Import(path string) (*types.Package, error) {\n-\treturn m.Import2(path, \"\" /* no vendoring */, 0)\n+\treturn m.ImportFrom(path, \"\" /* no vendoring */, 0)\n }\n \n-func (m *gccgoimports) Import2(path, srcDir string, mode types.ImportMode) (*types.Package, error) {\n+func (m *gccgoimports) ImportFrom(path, srcDir string, mode types.ImportMode) (*types.Package, error) {\n \tif mode != 0 {\n \t\tpanic(\"mode must be 0\")\n \t}"},{"sha":"ca109f0a80fdb735ec72affb74d38bcc9e3bf558","filename":"src/go/types/api.go","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/golang/go/blob/66330d8c6c0a23b7eb48688f9954264e48b039da/src/go/types/api.go","raw_url":"https://github.com/golang/go/raw/66330d8c6c0a23b7eb48688f9954264e48b039da/src/go/types/api.go","contents_url":"https://api.github.com/repos/golang/go/contents/src/go/types/api.go?ref=66330d8c6c0a23b7eb48688f9954264e48b039da","patch":"@@ -54,37 +54,37 @@ func (err Error) Error() string {\n // An Importer resolves import paths to Packages.\n //\n // CAUTION: This interface does not support the import of locally\n-// vendored packages. See also https://golang.org/s/go15vendor.\n-// If possible, external implementations should implement Importer2.\n+// vendored packages. See https://golang.org/s/go15vendor.\n+// If possible, external implementations should implement ImporterFrom.\n type Importer interface {\n \t// Import returns the imported package for the given import\n \t// path, or an error if the package couldn't be imported.\n-\t// Two calls to Import with the same path and srcDir return\n-\t// the same package.\n+\t// Two calls to Import with the same path return the same\n+\t// package.\n \tImport(path string) (*Package, error)\n }\n \n // ImportMode is reserved for future use.\n type ImportMode int\n \n-// An Importer2 resolves import paths to packages; it\n+// An ImporterFrom resolves import paths to packages; it\n // supports vendoring per https://golang.org/s/go15vendor.\n-// Use go/importer to obtain an Importer2 implementation.\n-type Importer2 interface {\n+// Use go/importer to obtain an ImporterFrom implementation.\n+type ImporterFrom interface {\n \t// Importer is present for backward-compatibility. Calling\n-\t// Import(path) is the same as calling Import(path, \"\", 0);\n+\t// Import(path) is the same as calling ImportFrom(path, \"\", 0);\n \t// i.e., locally vendored packages may not be found.\n-\t// The types package does not call Import if an Importer2\n+\t// The types package does not call Import if an ImporterFrom\n \t// is present.\n \tImporter\n \n-\t// Import2 returns the imported package for the given import\n+\t// ImportFrom returns the imported package for the given import\n \t// path when imported by the package in srcDir, or an error\n \t// if the package couldn't be imported. The mode value must\n \t// be 0; it is reserved for future use.\n-\t// Two calls to Import2 with the same path and srcDir return\n+\t// Two calls to ImportFrom with the same path and srcDir return\n \t// the same package.\n-\tImport2(path, srcDir string, mode ImportMode) (*Package, error)\n+\tImportFrom(path, srcDir string, mode ImportMode) (*Package, error)\n }\n \n // A Config specifies the configuration for type checking.\n@@ -114,8 +114,8 @@ type Config struct {\n \n \t// An importer is used to import packages referred to from\n \t// import declarations.\n-\t// If the installed importer implements Importer2, the type\n-\t// checker calls Import2 instead of Import.\n+\t// If the installed importer implements ImporterFrom, the type\n+\t// checker calls ImportFrom instead of Import.\n \t// The type checker reports an error if an importer is needed\n \t// but none was installed.\n \tImporter Importer"},{"sha":"14148a585b1047be92147d38a3dd100dc686a474","filename":"src/go/types/resolver.go","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/golang/go/blob/66330d8c6c0a23b7eb48688f9954264e48b039da/src/go/types/resolver.go","raw_url":"https://github.com/golang/go/raw/66330d8c6c0a23b7eb48688f9954264e48b039da/src/go/types/resolver.go","contents_url":"https://api.github.com/repos/golang/go/contents/src/go/types/resolver.go?ref=66330d8c6c0a23b7eb48688f9954264e48b039da","patch":"@@ -187,10 +187,10 @@ func (check *Checker) collectObjects() {\n \t\t\t\t\t\t\t// ordinary import\n \t\t\t\t\t\t\tif importer := check.conf.Importer; importer == nil {\n \t\t\t\t\t\t\t\terr = fmt.Errorf(\"Config.Importer not installed\")\n-\t\t\t\t\t\t\t} else if importer2, ok := importer.(Importer2); ok {\n-\t\t\t\t\t\t\t\timp, err = importer2.Import2(path, srcDir, 0)\n+\t\t\t\t\t\t\t} else if importerFrom, ok := importer.(ImporterFrom); ok {\n+\t\t\t\t\t\t\t\timp, err = importerFrom.ImportFrom(path, srcDir, 0)\n \t\t\t\t\t\t\t\tif imp == nil && err == nil {\n-\t\t\t\t\t\t\t\t\terr = fmt.Errorf(\"Config.Importer.Import2(%s, %s, 0) returned nil but no error\", path, pkg.path)\n+\t\t\t\t\t\t\t\t\terr = fmt.Errorf(\"Config.Importer.ImportFrom(%s, %s, 0) returned nil but no error\", path, pkg.path)\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t} else {\n \t\t\t\t\t\t\t\timp, err = importer.Import(path)"},{"sha":"4bb63b66488f8e5fe8e575399b542b31c0756352","filename":"src/go/types/resolver_test.go","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/golang/go/blob/66330d8c6c0a23b7eb48688f9954264e48b039da/src/go/types/resolver_test.go","raw_url":"https://github.com/golang/go/raw/66330d8c6c0a23b7eb48688f9954264e48b039da/src/go/types/resolver_test.go","contents_url":"https://api.github.com/repos/golang/go/contents/src/go/types/resolver_test.go?ref=66330d8c6c0a23b7eb48688f9954264e48b039da","patch":"@@ -18,7 +18,7 @@ import (\n )\n \n type resolveTestImporter struct {\n-\timporter Importer2\n+\timporter ImporterFrom\n \timported map[string]bool\n }\n \n@@ -26,15 +26,15 @@ func (imp *resolveTestImporter) Import(string) (*Package, error) {\n \tpanic(\"should not be called\")\n }\n \n-func (imp *resolveTestImporter) Import2(path, srcDir string, mode ImportMode) (*Package, error) {\n+func (imp *resolveTestImporter) ImportFrom(path, srcDir string, mode ImportMode) (*Package, error) {\n \tif mode != 0 {\n \t\tpanic(\"mode must be 0\")\n \t}\n \tif imp.importer == nil {\n-\t\timp.importer = importer.Default().(Importer2)\n+\t\timp.importer = importer.Default().(ImporterFrom)\n \t\timp.imported = make(map[string]bool)\n \t}\n-\tpkg, err := imp.importer.Import2(path, srcDir, mode)\n+\tpkg, err := imp.importer.ImportFrom(path, srcDir, mode)\n \tif err != nil {\n \t\treturn nil, err\n \t}"}]}